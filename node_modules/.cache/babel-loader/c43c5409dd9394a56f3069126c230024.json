{"ast":null,"code":"var globToRegexp = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob); // The regexp we are building, as a string.\n\n  var reStr = \"\"; // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n\n  var extended = opts ? !!opts.extended : false; // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n\n  var globstar = opts ? !!opts.globstar : false; // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n\n  var inGroup = false; // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n\n  var flags = opts && typeof opts.flags === \"string\" ? opts.flags : \"\";\n  var c;\n\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n      case \"/\":\n      case \"$\":\n      case \"^\":\n      case \"+\":\n      case \".\":\n      case \"(\":\n      case \")\":\n      case \"=\":\n      case \"!\":\n      case \"|\":\n        reStr += \"\\\\\" + c;\n        break;\n\n      case \"?\":\n        if (extended) {\n          reStr += \".\";\n          break;\n        }\n\n      case \"[\":\n      case \"]\":\n        if (extended) {\n          reStr += c;\n          break;\n        }\n\n      case \"{\":\n        if (extended) {\n          inGroup = true;\n          reStr += \"(\";\n          break;\n        }\n\n      case \"}\":\n        if (extended) {\n          inGroup = false;\n          reStr += \")\";\n          break;\n        }\n\n      case \",\":\n        if (inGroup) {\n          reStr += \"|\";\n          break;\n        }\n\n        reStr += \"\\\\\" + c;\n        break;\n\n      case \"*\":\n        // Move over all consecutive \"*\"'s.\n        // Also store the previous and next characters\n        var prevChar = str[i - 1];\n        var starCount = 1;\n\n        while (str[i + 1] === \"*\") {\n          starCount++;\n          i++;\n        }\n\n        var nextChar = str[i + 1];\n\n        if (!globstar) {\n          // globstar is disabled, so treat any number of \"*\" as one\n          reStr += \".*\";\n        } else {\n          // globstar is enabled, so determine if this is a globstar segment\n          var isGlobstar = starCount > 1 // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined) // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined); // to the end of the segment\n\n          if (isGlobstar) {\n            // it's a globstar, so match zero or more path segments\n            reStr += \"((?:[^/]*(?:\\/|$))*)\";\n            i++; // move over the \"/\"\n          } else {\n            // it's not a globstar, so only match one path segment\n            reStr += \"([^/]*)\";\n          }\n        }\n\n        break;\n\n      default:\n        reStr += c;\n    }\n  } // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n\n\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};\n/**\n * Expose `pathToRegexp`.\n */\n\n\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n/**\n * Default configs.\n */\n\nvar DEFAULT_DELIMITER = '/';\nvar DEFAULT_DELIMITERS = './';\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\n\nvar PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)', // Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n// \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n'(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'].join('|'), 'g');\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\n\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || DEFAULT_DELIMITER;\n  var delimiters = options && options.delimiters || DEFAULT_DELIMITERS;\n  var pathEscaped = false;\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length; // Ignore already escaped sequences.\n\n    if (escaped) {\n      path += escaped[1];\n      pathEscaped = true;\n      continue;\n    }\n\n    var prev = '';\n    var next = str[index];\n    var name = res[2];\n    var capture = res[3];\n    var group = res[4];\n    var modifier = res[5];\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1;\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k];\n        path = path.slice(0, k);\n      }\n    } // Push the current path onto the tokens.\n\n\n    if (path) {\n      tokens.push(path);\n      path = '';\n      pathEscaped = false;\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = prev || defaultDelimiter;\n    var pattern = capture || group;\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    });\n  } // Push any remaining characters.\n\n\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index));\n  }\n\n  return tokens;\n}\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\n\n\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options));\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\n\n\nfunction tokensToFunction(tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length); // Compile all the patterns before compilation.\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (data, options) {\n    var path = '';\n    var encode = options && options.encode || encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n\n      var value = data ? data[token.name] : undefined;\n      var segment;\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array');\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue;\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"');\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue;\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token);\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n        }\n\n        path += token.prefix + segment;\n        continue;\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix;\n        continue;\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'));\n    }\n\n    return path;\n  };\n}\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\n\n\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\n\n\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1');\n}\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\n\n\nfunction flags(options) {\n  return options && options.sensitive ? '' : 'i';\n}\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\n\n\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path; // Use a negative lookahead to match only capturing groups.\n\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      });\n    }\n  }\n\n  return path;\n}\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\n\n\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options));\n}\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\n\n\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\n\n\nfunction tokensToRegExp(tokens, keys, options) {\n  options = options || {};\n  var strict = options.strict;\n  var start = options.start !== false;\n  var end = options.end !== false;\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS;\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');\n  var route = start ? '^' : '';\n  var isEndDelimited = tokens.length === 0; // Iterate over the tokens and create our regexp string.\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;\n    } else {\n      var capture = token.repeat ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*' : token.pattern;\n      if (keys) keys.push(token);\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?';\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')';\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?';\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';\n  }\n\n  return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\n\n\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys);\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(\n    /** @type {!Array} */\n    path, keys, options);\n  }\n\n  return stringToRegexp(\n  /** @type {string} */\n  path, keys, options);\n}\n\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n} // Copyright Joyent, Inc. and other Node contributors.\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\n\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar decode = function (qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n  var maxKeys = 1000;\n\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count\n\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr,\n        vstr,\n        k,\n        v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n}; // Copyright Joyent, Inc. and other Node contributors.\n\n\nvar stringifyPrimitive = function (v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nvar encode = function (obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar querystring = createCommonjsModule(function (module, exports) {\n  exports.decode = exports.parse = decode;\n  exports.encode = exports.stringify = encode;\n});\nvar querystring_1 = querystring.decode;\nvar querystring_2 = querystring.parse;\nvar querystring_3 = querystring.encode;\nvar querystring_4 = querystring.stringify;\nlet URL; // https://stackoverflow.com/a/19709846/308237\n\nconst absoluteUrlRX = new RegExp('^(?:[a-z]+:)?//', 'i');\n\nconst headersToArray = headers => {\n  // node-fetch 1 Headers\n  if (typeof headers.raw === 'function') {\n    return Object.entries(headers.raw());\n  } else if (headers[Symbol.iterator]) {\n    return [...headers];\n  } else {\n    return Object.entries(headers);\n  }\n};\n\nconst zipObject = entries => entries.reduce((obj, [key, val]) => Object.assign(obj, {\n  [key]: val\n}), {});\n\nconst normalizeUrl = url => {\n  if (typeof url === 'function' || url instanceof RegExp || /^(begin|end|glob|express|path)\\:/.test(url)) {\n    return url;\n  }\n\n  if (absoluteUrlRX.test(url)) {\n    const u = new URL(url);\n    return u.href;\n  } else {\n    const u = new URL(url, 'http://dummy');\n    return u.pathname + u.search;\n  }\n};\n\nvar requestUtils = {\n  setUrlImplementation: it => {\n    URL = it;\n  },\n  normalizeRequest: (url, options, Request) => {\n    if (Request.prototype.isPrototypeOf(url)) {\n      const obj = {\n        url: normalizeUrl(url.url),\n        options: Object.assign({\n          method: url.method\n        }, options),\n        request: url\n      };\n      const headers = headersToArray(url.headers);\n\n      if (headers.length) {\n        obj.options.headers = zipObject(headers);\n      }\n\n      return obj;\n    } else if (typeof url === 'string' || // horrible URL object duck-typing\n    typeof url === 'object' && 'href' in url) {\n      return {\n        url: normalizeUrl(url),\n        options: options\n      };\n    } else if (typeof url === 'object') {\n      throw new TypeError('fetch-mock: Unrecognised Request object. Read the Config and Installation sections of the docs');\n    } else {\n      throw new TypeError('fetch-mock: Invalid arguments passed to fetch');\n    }\n  },\n  normalizeUrl,\n  getPath: url => {\n    const u = absoluteUrlRX.test(url) ? new URL(url) : new URL(url, 'http://dummy');\n    return u.pathname;\n  },\n  getQuery: url => {\n    const u = absoluteUrlRX.test(url) ? new URL(url) : new URL(url, 'http://dummy');\n    return u.search ? u.search.substr(1) : '';\n  },\n  headers: {\n    normalize: headers => zipObject(headersToArray(headers)),\n    toLowerCase: headers => Object.keys(headers).reduce((obj, k) => {\n      obj[k.toLowerCase()] = headers[k];\n      return obj;\n    }, {}),\n    equal: (actualHeader, expectedHeader) => {\n      actualHeader = Array.isArray(actualHeader) ? actualHeader : [actualHeader];\n      expectedHeader = Array.isArray(expectedHeader) ? expectedHeader : [expectedHeader];\n\n      if (actualHeader.length !== expectedHeader.length) {\n        return false;\n      }\n\n      return actualHeader.every((val, i) => val === expectedHeader[i]);\n    }\n  }\n};\nvar lodash_isequal = createCommonjsModule(function (module, exports) {\n  /**\n   * Lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright JS Foundation and other contributors <https://js.foundation/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** Used to compose bitmasks for value comparisons. */\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n  /** Used as references for various `Number` constants. */\n\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  /** `Object#toString` result references. */\n\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Detect free variable `exports`. */\n\n  var freeExports = exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n\n    return array;\n  }\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n\n\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n\n\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n    map.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n\n\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root['__core-js_shared__'];\n  /** Used to resolve the decompiled source of functions. */\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n\n  var nativeObjectToString = objectProto.toString;\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object);\n  /* Built-in method references that are verified to be native. */\n\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n  /** Used to detect maps, sets, and weakmaps. */\n\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    --this.size;\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n\n  function SetCache(values) {\n    var index = -1,\n        length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache();\n\n    while (++index < length) {\n      this.add(values[index]);\n    }\n  }\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n\n\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n\n    return this;\n  }\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n\n\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  } // Add methods to `SetCache`.\n\n\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n\n\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n    this.size = data.size;\n    return result;\n  }\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n\n\n  function stackSet(key, value) {\n    var data = this.__data__;\n\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n\n      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n\n      data = this.__data__ = new MapCache(pairs);\n    }\n\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  } // Add methods to `Stack`.\n\n\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n\n\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = objIsArr ? arrayTag : getTag(object),\n        othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n\n      objIsArr = true;\n      objIsObj = false;\n    }\n\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n\n    if (!isSameTag) {\n      return false;\n    }\n\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n\n\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(array);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var index = -1,\n        result = true,\n        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array); // Ignore non-index properties.\n\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n\n        result = false;\n        break;\n      } // Recursively compare arrays (susceptible to call stack limits).\n\n\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == other + '';\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        } // Assume cyclic values are equal.\n\n\n        var stacked = stack.get(object);\n\n        if (stacked) {\n          return stacked == other;\n        }\n\n        bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).\n\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n\n    }\n\n    return false;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = getAllKeys(object),\n        objLength = objProps.length,\n        othProps = getAllKeys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n\n    var index = objLength;\n\n    while (index--) {\n      var key = objProps[index];\n\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(object);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      } // Recursively compare objects (susceptible to call stack limits).\n\n\n      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n\n\n  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {\n    if (object == null) {\n      return [];\n    }\n\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function (symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\n  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : '';\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag;\n\n          case mapCtorString:\n            return mapTag;\n\n          case promiseCtorString:\n            return promiseTag;\n\n          case setCtorString:\n            return setTag;\n\n          case weakMapCtorString:\n            return weakMapTag;\n        }\n      }\n\n      return result;\n    };\n  }\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n    return value === proto;\n  }\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent.\n   *\n   * **Note:** This method supports comparing arrays, array buffers, booleans,\n   * date objects, error objects, maps, numbers, `Object` objects, regexes,\n   * sets, strings, symbols, and typed arrays. `Object` objects are compared\n   * by their own, not inherited, enumerable properties. Functions and DOM\n   * nodes are compared by strict equality, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.isEqual(object, other);\n   * // => true\n   *\n   * object === other;\n   * // => false\n   */\n\n  function isEqual(value, other) {\n    return baseIsEqual(value, other);\n  }\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n\n\n  function stubArray() {\n    return [];\n  }\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = isEqual;\n});\nconst headerUtils = requestUtils.headers,\n      getPath = requestUtils.getPath,\n      getQuery = requestUtils.getQuery,\n      normalizeUrl$1 = requestUtils.normalizeUrl;\nconst stringMatchers = {\n  begin: targetString => url => url.indexOf(targetString) === 0,\n  end: targetString => url => url.substr(-targetString.length) === targetString,\n  glob: targetString => {\n    const urlRX = globToRegexp(targetString);\n    return url => urlRX.test(url);\n  },\n  express: targetString => {\n    const urlRX = pathToRegexp_1(targetString);\n    return url => urlRX.test(getPath(url));\n  },\n  path: targetString => url => getPath(url) === targetString\n};\n\nconst getHeaderMatcher = ({\n  headers: expectedHeaders\n}) => {\n  const expectation = headerUtils.toLowerCase(expectedHeaders);\n  return (url, {\n    headers = {}\n  }) => {\n    const lowerCaseHeaders = headerUtils.toLowerCase(headerUtils.normalize(headers));\n    return Object.keys(expectation).every(headerName => headerUtils.equal(lowerCaseHeaders[headerName], expectation[headerName]));\n  };\n};\n\nconst getMethodMatcher = ({\n  method: expectedMethod\n}) => {\n  return (url, {\n    method\n  }) => expectedMethod === (method ? method.toLowerCase() : 'get');\n};\n\nconst getQueryStringMatcher = ({\n  query: expectedQuery\n}) => {\n  const keys = Object.keys(expectedQuery);\n  return url => {\n    const query = querystring.parse(getQuery(url));\n    return keys.every(key => query[key] === expectedQuery[key]);\n  };\n};\n\nconst getParamsMatcher = ({\n  params: expectedParams,\n  matcher\n}) => {\n  if (!/express:/.test(matcher)) {\n    throw new Error('fetch-mock: matching on params is only possible when using an express: matcher');\n  }\n\n  const expectedKeys = Object.keys(expectedParams);\n  const keys = [];\n  const re = pathToRegexp_1(matcher.replace(/^express:/, ''), keys);\n  return url => {\n    const vals = re.exec(getPath(url)) || [];\n    vals.shift();\n    const params = keys.reduce((map, {\n      name\n    }, i) => vals[i] ? Object.assign(map, {\n      [name]: vals[i]\n    }) : map, {});\n    return expectedKeys.every(key => params[key] === expectedParams[key]);\n  };\n};\n\nconst getFunctionMatcher = ({\n  matcher,\n  functionMatcher = () => true\n}) => typeof matcher === 'function' ? matcher : functionMatcher;\n\nconst getBodyMatcher = ({\n  body: expectedBody\n}) => {\n  return (url, {\n    body,\n    method = 'get'\n  }) => {\n    if (method.toLowerCase() === 'get') {\n      // GET requests don’t send a body so the body matcher should be ignored for them\n      return true;\n    }\n\n    let sentBody;\n\n    try {\n      sentBody = JSON.parse(body);\n    } catch (_) {}\n\n    return sentBody && lodash_isequal(sentBody, expectedBody);\n  };\n};\n\nconst getUrlMatcher = route => {\n  const matcher = route.matcher,\n        query = route.query;\n\n  if (typeof matcher === 'function') {\n    return () => true;\n  }\n\n  if (matcher instanceof RegExp) {\n    return url => matcher.test(url);\n  }\n\n  if (matcher === '*') {\n    return () => true;\n  }\n\n  for (const shorthand in stringMatchers) {\n    if (matcher.indexOf(shorthand + ':') === 0) {\n      const url = matcher.replace(new RegExp(\"^\".concat(shorthand, \":\")), '');\n      return stringMatchers[shorthand](url);\n    }\n  } // if none of the special syntaxes apply, it's just a simple string match\n  // but we have to be careful to normalize the url we check and the name\n  // of the route to allow for e.g. http://it.at.there being indistinguishable\n  // from http://it.at.there/ once we start generating Request/Url objects\n\n\n  const expectedUrl = normalizeUrl$1(matcher);\n\n  if (route.identifier === matcher) {\n    route.identifier = expectedUrl;\n  }\n\n  return url => {\n    if (query && expectedUrl.indexOf('?')) {\n      return url.indexOf(expectedUrl) === 0;\n    }\n\n    return normalizeUrl$1(url) === expectedUrl;\n  };\n};\n\nvar generateMatcher = route => {\n  const matchers = [route.query && getQueryStringMatcher(route), route.method && getMethodMatcher(route), route.headers && getHeaderMatcher(route), route.params && getParamsMatcher(route), route.body && getBodyMatcher(route), getFunctionMatcher(route), getUrlMatcher(route)].filter(matcher => !!matcher);\n  return (url, options = {}, request) => matchers.every(matcher => matcher(url, options, request));\n};\n\nconst sanitizeRoute = route => {\n  route = Object.assign({}, route);\n\n  if (route.method) {\n    route.method = route.method.toLowerCase();\n  }\n\n  route.identifier = route.name || route.matcher;\n  return route;\n};\n\nconst validateRoute = route => {\n  if (!('response' in route)) {\n    throw new Error('fetch-mock: Each route must define a response');\n  }\n\n  if (!route.matcher) {\n    throw new Error('fetch-mock: Each route must specify a string, regex or function to match calls to fetch');\n  }\n};\n\nconst limitMatcher = route => {\n  if (!route.repeat) {\n    return;\n  }\n\n  const matcher = route.matcher;\n  let timesLeft = route.repeat;\n\n  route.matcher = (url, options) => {\n    const match = timesLeft && matcher(url, options);\n\n    if (match) {\n      timesLeft--;\n      return true;\n    }\n  };\n\n  route.reset = () => timesLeft = route.repeat;\n};\n\nconst delayResponse = route => {\n  const delay = route.delay;\n\n  if (delay) {\n    const response = route.response;\n\n    route.response = () => new Promise(res => setTimeout(() => res(response), delay));\n  }\n};\n\nvar compileRoute = route => {\n  validateRoute(route);\n  route = sanitizeRoute(route);\n  route.matcher = generateMatcher(route);\n  limitMatcher(route);\n  delayResponse(route);\n  return route;\n};\n\nvar sanitizeRoute_1 = sanitizeRoute;\ncompileRoute.sanitizeRoute = sanitizeRoute_1;\nconst FetchMock = {};\n\nFetchMock.mock = function (...args) {\n  if (args.length) {\n    const matcher = args[0],\n          response = args[1],\n          _args$ = args[2],\n          options = _args$ === void 0 ? {} : _args$;\n    let route; // Handle the variety of parameters accepted by mock (see README)\n\n    if (matcher && response) {\n      route = Object.assign({\n        matcher,\n        response\n      }, options);\n    } else if (matcher && matcher.matcher) {\n      route = matcher;\n    } else {\n      throw new Error('fetch-mock: Invalid parameters passed to fetch-mock');\n    }\n\n    this.addRoute(route);\n  }\n\n  return this._mock();\n};\n\nFetchMock.addRoute = function (uncompiledRoute) {\n  const route = this.compileRoute(uncompiledRoute);\n  const clashes = this.routes.filter(({\n    identifier,\n    method\n  }) => identifier === route.identifier && (!method || !route.method || method === route.method));\n  const overwriteRoutes = 'overwriteRoutes' in route ? route.overwriteRoutes : this.config.overwriteRoutes;\n\n  if (overwriteRoutes === false || !clashes.length) {\n    this._uncompiledRoutes.push(uncompiledRoute);\n\n    return this.routes.push(route);\n  }\n\n  if (overwriteRoutes === true) {\n    clashes.forEach(clash => {\n      const index = this.routes.indexOf(clash);\n\n      this._uncompiledRoutes.splice(index, 1, uncompiledRoute);\n\n      this.routes.splice(index, 1, route);\n    });\n    return this.routes;\n  }\n\n  if (clashes.length) {\n    throw new Error('fetch-mock: Adding route with same name or matcher as existing route. See `overwriteRoutes` option.');\n  }\n\n  this._uncompiledRoutes.push(uncompiledRoute);\n\n  this.routes.push(route);\n};\n\nFetchMock._mock = function () {\n  if (!this.isSandbox) {\n    // Do this here rather than in the constructor to ensure it's scoped to the test\n    this.realFetch = this.realFetch || this.global.fetch;\n    this.global.fetch = this.fetchHandler;\n  }\n\n  return this;\n};\n\nFetchMock.catch = function (response) {\n  if (this.fallbackResponse) {\n    console.warn('calling fetchMock.catch() twice - are you sure you want to overwrite the previous fallback response'); // eslint-disable-line\n  }\n\n  this.fallbackResponse = response || 'ok';\n  return this._mock();\n};\n\nFetchMock.spy = function () {\n  this._mock();\n\n  return this.catch(this.getNativeFetch());\n};\n\nFetchMock.compileRoute = compileRoute;\n\nFetchMock.once = function (matcher, response, options = {}) {\n  return this.mock(matcher, response, Object.assign({}, options, {\n    repeat: 1\n  }));\n};\n\n['get', 'post', 'put', 'delete', 'head', 'patch'].forEach(method => {\n  const extendOptions = options => Object.assign({}, options, {\n    method: method.toUpperCase()\n  });\n\n  FetchMock[method] = function (matcher, response, options = {}) {\n    return this.mock(matcher, response, extendOptions(options));\n  };\n\n  FetchMock[\"\".concat(method, \"Once\")] = function (matcher, response, options = {}) {\n    return this.once(matcher, response, extendOptions(options));\n  };\n});\n\nFetchMock.resetBehavior = function () {\n  if (this.realFetch) {\n    this.global.fetch = this.realFetch;\n    this.realFetch = undefined;\n  }\n\n  this.fallbackResponse = undefined;\n  this.routes = [];\n  this._uncompiledRoutes = [];\n  return this;\n};\n\nFetchMock.resetHistory = function () {\n  this._calls = [];\n  this._holdingPromises = [];\n  this.routes.forEach(route => route.reset && route.reset());\n  return this;\n};\n\nFetchMock.restore = FetchMock.reset = function () {\n  this.resetBehavior();\n  this.resetHistory();\n  return this;\n};\n\nvar setUpAndTearDown = FetchMock;\nconst responseConfigProps = ['body', 'headers', 'throws', 'status', 'redirectUrl'];\n\nclass ResponseBuilder {\n  constructor(options) {\n    Object.assign(this, options);\n  }\n\n  exec() {\n    this.normalizeResponseConfig();\n    this.constructFetchOpts();\n    this.constructResponseBody();\n    return this.buildObservableResponse(new this.fetchMock.config.Response(this.body, this.options));\n  }\n\n  sendAsObject() {\n    if (responseConfigProps.some(prop => this.responseConfig[prop])) {\n      if (Object.keys(this.responseConfig).every(key => responseConfigProps.includes(key))) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  normalizeResponseConfig() {\n    // If the response config looks like a status, start to generate a simple response\n    if (typeof this.responseConfig === 'number') {\n      this.responseConfig = {\n        status: this.responseConfig\n      }; // If the response config is not an object, or is an object that doesn't use\n      // any reserved properties, assume it is meant to be the body of the response\n    } else if (typeof this.responseConfig === 'string' || this.sendAsObject()) {\n      this.responseConfig = {\n        body: this.responseConfig\n      };\n    }\n  }\n\n  validateStatus(status) {\n    if (!status) {\n      return 200;\n    }\n\n    if (typeof status === 'number' && parseInt(status, 10) !== status && status >= 200 || status < 600) {\n      return status;\n    }\n\n    throw new TypeError(\"fetch-mock: Invalid status \".concat(status, \" passed on response object.\\nTo respond with a JSON object that has status as a property assign the object to body\\ne.g. {\\\"body\\\": {\\\"status: \\\"registered\\\"}}\"));\n  }\n\n  constructFetchOpts() {\n    this.options = this.responseConfig.options || {};\n    this.options.url = this.responseConfig.redirectUrl || this.url;\n    this.options.status = this.validateStatus(this.responseConfig.status);\n    this.options.statusText = this.fetchMock.statusTextMap['' + this.options.status]; // Set up response headers. The empty object is to cope with\n    // new Headers(undefined) throwing in Chrome\n    // https://code.google.com/p/chromium/issues/detail?id=335871\n\n    this.options.headers = new this.fetchMock.config.Headers(this.responseConfig.headers || {});\n  }\n\n  getOption(name) {\n    return name in this.route ? this.route[name] : this.fetchMock.config[name];\n  }\n\n  convertToJson() {\n    // convert to json if we need to\n    if (this.getOption('sendAsJson') && this.responseConfig.body != null && //eslint-disable-line\n    typeof this.body === 'object') {\n      this.body = JSON.stringify(this.body);\n\n      if (!this.options.headers.has('Content-Type')) {\n        this.options.headers.set('Content-Type', 'application/json');\n      }\n    }\n  }\n\n  setContentLength() {\n    // add a Content-Length header if we need to\n    if (this.getOption('includeContentLength') && typeof this.body === 'string' && !this.options.headers.has('Content-Length')) {\n      this.options.headers.set('Content-Length', this.body.length.toString());\n    }\n  }\n\n  constructResponseBody() {\n    // start to construct the body\n    this.body = this.responseConfig.body;\n    this.convertToJson();\n    this.setContentLength(); // On the server we need to manually construct the readable stream for the\n    // Response object (on the client this done automatically)\n\n    if (this.Stream) {\n      const stream = new this.Stream.Readable();\n\n      if (this.body != null) {\n        //eslint-disable-line\n        stream.push(this.body, 'utf-8');\n      }\n\n      stream.push(null);\n      this.body = stream;\n    }\n\n    this.body = this.body;\n  }\n\n  buildObservableResponse(response) {\n    const fetchMock = this.fetchMock; // Using a proxy means we can set properties that may not be writable on\n    // the original Response. It also means we can track the resolution of\n    // promises returned by res.json(), res.text() etc\n\n    return new Proxy(response, {\n      get: (originalResponse, name) => {\n        if (this.responseConfig.redirectUrl) {\n          if (name === 'url') {\n            return this.responseConfig.redirectUrl;\n          }\n\n          if (name === 'redirected') {\n            return true;\n          }\n        }\n\n        if (typeof originalResponse[name] === 'function') {\n          return new Proxy(originalResponse[name], {\n            apply: (func, thisArg, args) => {\n              const result = func.apply(response, args);\n\n              if (result.then) {\n                fetchMock._holdingPromises.push(result.catch(() => null));\n              }\n\n              return result;\n            }\n          });\n        }\n\n        return originalResponse[name];\n      }\n    });\n  }\n\n}\n\nvar responseBuilder = options => new ResponseBuilder(options).exec();\n\nconst FetchMock$1 = {}; // see https://heycam.github.io/webidl/#aborterror for the standardised interface\n// Note that this differs slightly from node-fetch\n\nclass AbortError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'AbortError';\n    this.message = 'The operation was aborted.'; // Do not include this class in the stacktrace\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n}\n\nconst resolve = async ({\n  response,\n  responseIsFetch = false\n}, url, options, request) => {\n  // We want to allow things like\n  // - function returning a Promise for a response\n  // - delaying (using a timeout Promise) a function's execution to generate\n  //   a response\n  // Because of this we can't safely check for function before Promisey-ness,\n  // or vice versa. So to keep it DRY, and flexible, we keep trying until we\n  // have something that looks like neither Promise nor function\n  while (true) {\n    if (typeof response === 'function') {\n      // in the case of falling back to the network we need to make sure we're using\n      // the original Request instance, not our normalised url + options\n      response = request && responseIsFetch ? response(request) : response(url, options, request);\n    } else if (typeof response.then === 'function') {\n      response = await response;\n    } else {\n      return response;\n    }\n  }\n};\n\nFetchMock$1.fetchHandler = function (url, options, request) {\n  var _requestUtils$normali = requestUtils.normalizeRequest(url, options, this.config.Request);\n\n  url = _requestUtils$normali.url;\n  options = _requestUtils$normali.options;\n  request = _requestUtils$normali.request;\n  const route = this.executeRouter(url, options, request); // this is used to power the .flush() method\n\n  let done;\n\n  this._holdingPromises.push(new this.config.Promise(res => done = res)); // wrapped in this promise to make sure we respect custom Promise\n  // constructors defined by the user\n\n\n  return new this.config.Promise((res, rej) => {\n    if (options && options.signal) {\n      const abort = () => {\n        rej(new AbortError());\n        done();\n      };\n\n      if (options.signal.aborted) {\n        abort();\n      }\n\n      options.signal.addEventListener('abort', abort);\n    }\n\n    this.generateResponse(route, url, options, request).then(res, rej).then(done, done);\n  });\n};\n\nFetchMock$1.fetchHandler.isMock = true;\n\nFetchMock$1.executeRouter = function (url, options, request) {\n  if (this.config.fallbackToNetwork === 'always') {\n    return {\n      response: this.getNativeFetch(),\n      responseIsFetch: true\n    };\n  }\n\n  const match = this.router(url, options, request);\n\n  if (match) {\n    return match;\n  }\n\n  if (this.config.warnOnFallback) {\n    console.warn(\"Unmatched \".concat(options && options.method || 'GET', \" to \").concat(url)); // eslint-disable-line\n  }\n\n  this.push({\n    url,\n    options,\n    request,\n    isUnmatched: true\n  });\n\n  if (this.fallbackResponse) {\n    return {\n      response: this.fallbackResponse\n    };\n  }\n\n  if (!this.config.fallbackToNetwork) {\n    throw new Error(\"fetch-mock: No fallback response defined for \".concat(options && options.method || 'GET', \" to \").concat(url));\n  }\n\n  return {\n    response: this.getNativeFetch(),\n    responseIsFetch: true\n  };\n};\n\nFetchMock$1.generateResponse = async function (route, url, options, request) {\n  const response = await resolve(route, url, options, request); // If the response says to throw an error, throw it\n  // Type checking is to deal with sinon spies having a throws property :-0\n\n  if (response.throws && typeof response !== 'function') {\n    throw response.throws;\n  } // If the response is a pre-made Response, respond with it\n\n\n  if (this.config.Response.prototype.isPrototypeOf(response)) {\n    return response;\n  } // finally, if we need to convert config into a response, we do it\n\n\n  return responseBuilder({\n    url,\n    responseConfig: response,\n    fetchMock: this,\n    route\n  });\n};\n\nFetchMock$1.router = function (url, options, request) {\n  const route = this.routes.find(route => route.matcher(url, options, request));\n\n  if (route) {\n    this.push({\n      url,\n      options,\n      request,\n      identifier: route.identifier\n    });\n    return route;\n  }\n};\n\nFetchMock$1.getNativeFetch = function () {\n  const func = this.realFetch || this.isSandbox && this.config.fetch;\n\n  if (!func) {\n    throw new Error('fetch-mock: Falling back to network only available on gloabl fetch-mock, or by setting config.fetch on sandboxed fetch-mock');\n  }\n\n  return func;\n};\n\nFetchMock$1.push = function ({\n  url,\n  options,\n  request,\n  isUnmatched,\n  identifier\n}) {\n  const args = [url, options];\n  args.request = request;\n  args.identifier = identifier;\n  args.isUnmatched = isUnmatched;\n\n  this._calls.push(args);\n};\n\nvar fetchHandler = FetchMock$1;\nconst normalizeUrl$2 = requestUtils.normalizeUrl;\nconst FetchMock$2 = {};\nconst sanitizeRoute$1 = compileRoute.sanitizeRoute;\n\nconst isName = nameOrMatcher => typeof nameOrMatcher === 'string' && /^[\\da-zA-Z\\-]+$/.test(nameOrMatcher);\n\nconst filterCallsWithMatcher = (matcher, options = {}, calls) => {\n  matcher = generateMatcher(sanitizeRoute$1(Object.assign({\n    matcher\n  }, options)));\n  return calls.filter(([url, options]) => matcher(normalizeUrl$2(url), options));\n};\n\nFetchMock$2.filterCalls = function (nameOrMatcher, options) {\n  let calls = this._calls;\n  let matcher = '*';\n\n  if ([true, 'matched'].includes(nameOrMatcher)) {\n    calls = calls.filter(({\n      isUnmatched\n    }) => !isUnmatched);\n  } else if ([false, 'unmatched'].includes(nameOrMatcher)) {\n    calls = calls.filter(({\n      isUnmatched\n    }) => isUnmatched);\n  } else if (typeof nameOrMatcher === 'undefined') {\n    calls = calls;\n  } else if (isName(nameOrMatcher)) {\n    calls = calls.filter(({\n      identifier\n    }) => identifier === nameOrMatcher);\n  } else {\n    matcher = normalizeUrl$2(nameOrMatcher);\n\n    if (this.routes.some(({\n      identifier\n    }) => identifier === matcher)) {\n      calls = calls.filter(call => call.identifier === matcher);\n    }\n  }\n\n  if ((options || matcher !== '*') && calls.length) {\n    if (typeof options === 'string') {\n      options = {\n        method: options\n      };\n    }\n\n    calls = filterCallsWithMatcher(matcher, options, calls);\n  }\n\n  return calls;\n};\n\nFetchMock$2.calls = function (nameOrMatcher, options) {\n  return this.filterCalls(nameOrMatcher, options);\n};\n\nFetchMock$2.lastCall = function (nameOrMatcher, options) {\n  return [...this.filterCalls(nameOrMatcher, options)].pop();\n};\n\nFetchMock$2.lastUrl = function (nameOrMatcher, options) {\n  return (this.lastCall(nameOrMatcher, options) || [])[0];\n};\n\nFetchMock$2.lastOptions = function (nameOrMatcher, options) {\n  return (this.lastCall(nameOrMatcher, options) || [])[1];\n};\n\nFetchMock$2.called = function (nameOrMatcher, options) {\n  return !!this.filterCalls(nameOrMatcher, options).length;\n};\n\nFetchMock$2.flush = function (waitForResponseMethods) {\n  const queuedPromises = this._holdingPromises;\n  this._holdingPromises = [];\n  return Promise.all(queuedPromises).then(() => {\n    if (waitForResponseMethods && this._holdingPromises.length) {\n      return this.flush(waitForResponseMethods);\n    }\n  });\n};\n\nFetchMock$2.done = function (nameOrMatcher) {\n  const routesToCheck = nameOrMatcher && typeof nameOrMatcher !== 'boolean' ? [{\n    identifier: nameOrMatcher\n  }] : this.routes; // Can't use array.every because would exit after first failure, which would\n  // break the logging\n\n  return routesToCheck.map(({\n    identifier\n  }) => {\n    if (!this.called(identifier)) {\n      console.warn(\"Warning: \".concat(identifier, \" not called\")); // eslint-disable-line\n\n      return false;\n    }\n\n    const expectedTimes = (this.routes.find(r => r.identifier === identifier) || {}).repeat;\n\n    if (!expectedTimes) {\n      return true;\n    }\n\n    const actualTimes = this.filterCalls(identifier).length;\n\n    if (expectedTimes > actualTimes) {\n      console.warn(\"Warning: \".concat(identifier, \" only called \").concat(actualTimes, \" times, but \").concat(expectedTimes, \" expected\")); // eslint-disable-line\n\n      return false;\n    } else {\n      return true;\n    }\n  }).every(isDone => isDone);\n};\n\nvar inspecting = FetchMock$2;\nconst FetchMock$3 = Object.assign({}, fetchHandler, setUpAndTearDown, inspecting);\nFetchMock$3.config = {\n  fallbackToNetwork: false,\n  includeContentLength: true,\n  sendAsJson: true,\n  warnOnFallback: true,\n  overwriteRoutes: undefined\n};\n\nFetchMock$3.createInstance = function () {\n  const instance = Object.create(FetchMock$3);\n  instance._uncompiledRoutes = (this._uncompiledRoutes || []).slice();\n  instance.routes = instance._uncompiledRoutes.map(config => instance.compileRoute(config));\n  instance.fallbackResponse = this.fallbackResponse || undefined;\n  instance.config = Object.assign({}, this.config || FetchMock$3.config);\n  instance._calls = [];\n  instance._holdingPromises = [];\n  instance.bindMethods();\n  return instance;\n};\n\nFetchMock$3.bindMethods = function () {\n  this.fetchHandler = FetchMock$3.fetchHandler.bind(this);\n  this.reset = this.restore = FetchMock$3.reset.bind(this);\n  this.resetHistory = FetchMock$3.resetHistory.bind(this);\n  this.resetBehavior = FetchMock$3.resetBehavior.bind(this);\n};\n\nFetchMock$3.sandbox = function () {\n  // this construct allows us to create a fetch-mock instance which is also\n  // a callable function, while circumventing circularity when defining the\n  // object that this function should be bound to\n  const proxy = (url, options) => sandbox.fetchHandler(url, options);\n\n  const sandbox = Object.assign(proxy, // Ensures that the entire returned object is a callable function\n  FetchMock$3, // prototype methods\n  this.createInstance() // instance data\n  );\n  sandbox.bindMethods();\n  sandbox.isSandbox = true;\n  return sandbox;\n};\n\nvar lib = FetchMock$3;\nconst statusTextMap = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': \"I'm a teapot\",\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Unordered Collection',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '509': 'Bandwidth Limit Exceeded',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};\nvar statusText = statusTextMap;\nconst theGlobal = typeof window !== 'undefined' ? window : self;\nconst setUrlImplementation = requestUtils.setUrlImplementation;\nsetUrlImplementation(theGlobal.URL);\nlib.global = theGlobal;\nlib.statusTextMap = statusText;\nlib.config = Object.assign(lib.config, {\n  Promise: theGlobal.Promise,\n  Request: theGlobal.Request,\n  Response: theGlobal.Response,\n  Headers: theGlobal.Headers\n});\nvar client = lib.createInstance();\nexport default client;","map":null,"metadata":{},"sourceType":"module"}