{"ast":null,"code":"import _slicedToArray from \"/Users/idastensrud/jsfw-ca/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/idastensrud/jsfw-ca/src/components/cards/list/CardList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport fetchMock from \"fetch-mock\";\nimport { BASE_URL } from \"../../../constants/API\";\nimport mockCards from \"../../../constants/cards\";\nimport \"./CardList.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CardItem from \"./CardItem\";\nimport { withRouter } from \"react-router-dom\";\nexport default function CardList() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        setCards = _useState2[1];\n\n  useEffect(() => {\n    fetchMock.mock(BASE_URL, {\n      cards: mockCards\n    });\n    fetch(BASE_URL).then(response => response.json()).then(json => setCards(json.cards)).catch(error => console.log(error));\n  }, []);\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, cards.map(card => {\n    const id = card.id,\n          name = card.name,\n          imageUrl = card.imageUrl;\n    return React.createElement(Col, {\n      sm: 6,\n      md: 3,\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(CardItem, {\n      id: id,\n      name: name,\n      imageUrl: imageUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/idastensrud/jsfw-ca/src/components/cards/list/CardList.js"],"names":["React","useState","useEffect","fetchMock","BASE_URL","mockCards","Row","Col","CardItem","withRouter","CardList","cards","setCards","mock","fetch","then","response","json","catch","error","console","log","map","card","id","name","imageUrl"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,gBAAP;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,eAAe,SAASC,QAAT,GAAoB;AAAA,oBACLT,QAAQ,CAAC,EAAD,CADH;AAAA;AAAA,QACxBU,KADwB;AAAA,QACjBC,QADiB;;AAE/BV,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,SAAS,CAACU,IAAV,CAAeT,QAAf,EAAyB;AAAEO,MAAAA,KAAK,EAAEN;AAAT,KAAzB;AAEAS,IAAAA,KAAK,CAACV,QAAD,CAAL,CACKW,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUE,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACN,KAAN,CAF1B,EAGKO,KAHL,CAGWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAHpB;AAIH,GAPQ,EAON,EAPM,CAAT;AASA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACAR,KAAK,CAACW,GAAN,CAAUC,IAAI,IAAI;AAAA,UACPC,EADO,GACgBD,IADhB,CACPC,EADO;AAAA,UACHC,IADG,GACgBF,IADhB,CACHE,IADG;AAAA,UACGC,QADH,GACgBH,IADhB,CACGG,QADH;AAGf,WACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,EAAE,EAAE,CAAhB;AAAmB,MAAA,GAAG,EAAEF,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEA,EAAd;AAAkB,MAAA,IAAI,EAAEC,IAAxB;AAA8B,MAAA,QAAQ,EAAEC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH,GARA,CADA,CADF;AAaH","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetchMock from \"fetch-mock\";\nimport { BASE_URL } from \"../../../constants/API\";\nimport mockCards from \"../../../constants/cards\";\nimport \"./CardList.css\"\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CardItem from \"./CardItem\";\nimport { withRouter } from \"react-router-dom\";\n\n\nexport default function CardList() {\n    const [cards, setCards] = useState([]);\n    useEffect(() => {\n        fetchMock.mock(BASE_URL, { cards: mockCards });\n\n        fetch(BASE_URL)\n            .then(response => response.json())\n            .then(json => setCards(json.cards))\n            .catch(error => console.log(error));\n    }, []);\n\n    return (\n      <Row>\n     {cards.map(card => {\n         const { id, name, imageUrl } = card;\n\n         return (\n             <Col sm={6} md={3} key={id}>\n                 <CardItem id={id} name={name} imageUrl={imageUrl} />\n             </Col>\n         );\n     })}\n </Row>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}